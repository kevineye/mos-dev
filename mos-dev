#!/usr/bin/perl

package MOSDev;

use autodie qw(:all);
use Moo;

use CLI::Osprey abbreviate => 0;
use IO::Interface::Simple;
use IO::Socket::INET;
use JSON ();
use Term::ANSIColor 'color';
use Time::CTime 'strftime';
use Time::HiRes;
use YAML ();

option port => (
    is         => 'lazy',
    format     => 's',
    format_doc => 'port',
    doc        => 'port to connect to device (/dev/tty..., ws://.../rpc)',
    short      => 'p',
  );
sub _build_port {
  return shift->config->{port} || '';
}

option mos_cli => (
    is         => 'rw',
    format     => 's',
    format_doc => 'path',
    default    => 'mos',
    doc        => 'path to `mos` binary',
  );

option 'config_dir' => (
    is         => 'rw',
    format     => 's',
    format_doc => 'path',
    default    => './.mos-dev',
    doc        => 'directory of mos-dev.yml config file',
  );

sub config_file {
  return shift->config_dir . '/mos-dev.yml';
}

has config => (
    is => 'lazy'
  );
sub _build_config {
  my $self = shift;
  return {} unless -e $self->config_file;
  return YAML::LoadFile($self->config_file);
}

sub run {
  my ($self) = @_;
  $self->osprey_usage;
}

sub save_port {
  my ($self, $port) = @_;
  $self->config->{port} = $port;
  $self->save_config;
}

sub save_config {
  my ($self) = shift;
  mkdir $self->config_dir unless -d $self->config_dir;
  local $YAML::Stringify = 1;
  local $YAML::UseHeader = 0;
  YAML::DumpFile($self->config_file, $self->config);
}

sub port_type {
  my $port = shift->port;
  return $port =~ m{^ws://} ? 'ws' : 'dev';
}

sub call {
  my ($self, $cmd, $args) = @_;
  return MOSDev::Call->new_with_options(parent_command => $self)->call($cmd, $args);
}

option 'udp_log_addr' => (
    is         => 'lazy',
    format     => 's',
    format_doc => 'host:port',
    doc        => 'listening/sending address for UDP logging',
  );
sub _build_udp_log_addr {
  my $port = '10001';
  for my $name (qw(eth0 en0)) {
    my $if = IO::Interface::Simple->new($name);
    next unless $if;
    my $addr = $if->address;
    return "$addr:$port" if $addr;
  }
  for my $i (0 .. 10) {
    my $if = IO::Interface::Simple->new_from_index($i);
    next unless $if;
    my $addr = $if->address;
    return "$addr:$port" if $addr;
  }
  return "127.0.0.1:$port";
}

sub status {
  my $self = shift;
  my $info = $self->call('Sys.GetInfo');

  my $gy = color('bright_black');
  my $bk = color('black');
  my $gn = color('green');
  my $bl = color('blue');
  my $mg = color('magenta');

  printf "${gy}Port:   ${gn}%s\n", $self->port;
  printf "${gy}Uptime: ${mg}%s seconds\n", $info->{uptime};
  printf "${gy}Chip:   ${gy}%s\n", $info->{arch};
  printf "${gy}App:    ${bl}%s %s ${gy}(build %s)\n", $info->{app}, $info->{fw_version}, $info->{fw_id};
  printf "${gy}FS:     ${bk}%s free ${gy}of %s\n", $info->{fs_free}, $info->{fs_size};
  printf "${gy}RAM:    ${bk}%s free ${gy}of %s (%s min free)\n", $info->{ram_free}, $info->{ram_size},
    $info->{ram_min_free};
  printf "${gy}MAC:    ${gy}%s\n", $info->{mac} =~ s{(..)(..)(..)(..)(..)(..)}{$1:$2:$3:$4:$5:$6}r;
  printf "${gy}WiFi:   %s%s\n", ($info->{wifi}{status} =~ /connected|got ip/ ? $gn : $gy),
    ($info->{wifi}{sta_ip} ? "$info->{wifi}{sta_ip} on $info->{wifi}{ssid}" : $info->{wifi}{ap_ip} || $info->{wifi}{status});
  print color('reset');
}

subcommand connect => sub {
    my $self = shift;
    my $port = $_[0] || $self->port;
    $self->save_port($port);
    $self->status;
  };

sub download_config {
  my ($self, $device_config) = @_;
  my $port = $self->port;
  my $cmd = sprintf '"%s" --port "%s" config-get', $self->mos_cli, $port;
  my $out = qx{$cmd};
  if ($out =~ /^{/) {
    open my $fh, '>', $device_config;
    $fh->print($out);
    $fh->close;
  }
  else {
    die "Connect to device at $port failed.\n";
  }
}

sub log {
  my ($self, $message) = @_;
  printf "%s[%s] > %s%s\n", color('bright_black'), strftime('%b %d %T.000', localtime), $message, color('reset');
}

subcommand reboot => sub {shift->call('Sys.Reboot')};
subcommand help => sub {shift->osprey_help};

subcommand build => 'MOSDev::Build';
subcommand call => 'MOSDev::Call';
subcommand console => 'MOSDev::Console';
subcommand flash => 'MOSDev::Flash';
subcommand sync => 'MOSDev::Sync';


# =============================================================================
package MOSDev::Sync;
use Moo;
use CLI::Osprey desc => 'sync device with fs, watch console, and watch for commands';
use Cwd 'abs_path';
use Filesys::Notify::Simple;

sub run {
  my ($self) = @_;
  my $mosdev = $self->parent_command;

  my $port = $mosdev->port;
  $mosdev->save_port($port);
  $mosdev->status;
  print "\n";

  my $device_config = abs_path $mosdev->config_dir . "/config.json";
  $mosdev->download_config($device_config);
  $mosdev->log("Downloaded config -> .mos-dev/config.json");

  my $console = MOSDev::Console->new_with_options(parent_command => $mosdev, wait => 0);
  $console->run;

  my $reboot_file = abs_path $mosdev->config_dir . "/reboot";
  unless (-e $reboot_file) {
    open my $fh, '>', $reboot_file;
    $fh->close;
  }

  my $build_file = abs_path $mosdev->config_dir . "/build";
  unless (-e $build_file) {
    open my $fh, '>', $build_file;
    $fh->close;
  }

  my $watcher = Filesys::Notify::Simple->new([ '.' ]);
  my $cwd = abs_path '.';
  my $skip_next_config_event = 0;
  while (1) {
    $watcher->wait(sub {
      for my $event (@_) {
        if ($event->{path} eq $reboot_file) {
          $console->stop;
          $mosdev->log("Reboot file touched, rebooting device");
          $mosdev->call('Sys.Reboot');
          $console->start;
        }
        elsif ($event->{path} eq $device_config) {
          if ($skip_next_config_event == 0) {
            $console->stop;
            if (-f $event->{path}) {
              $mosdev->log("Uploading .mos-dev/config.json");
              open my $fh, '<', $device_config;
              my $c = JSON->new->allow_nonref->decode(join '', <$fh>);
              $fh->close;
              $mosdev->call('Config.Set', { config => $c });
              $mosdev->call('Config.Save', { reboot => JSON::false });
              $mosdev->download_config($device_config);
              $skip_next_config_event++;
              $mosdev->log("Downloaded config -> .mos-dev/config.json");
              $mosdev->log("Rebooting device");
              $mosdev->call('Sys.Reboot');
            }
            else {
              $mosdev->download_config($device_config);
              $skip_next_config_event++;
              $mosdev->log("Downloaded config -> .mos-dev/config.json");
            }
            $console->start;
          }
          else {
            $skip_next_config_event--;
          }
        }
        elsif ($event->{path} =~ qr{^$cwd/(fs/.*)}) {
          $console->stop;
          if (-f $event->{path}) {
            $mosdev->log("Uploading file $1");
            system $mosdev->mos_cli, '--port', $port, 'put', $event->{path};
          }
          else {
            $mosdev->log("Removing file $1");
            my $f = $event->{path};
            $f =~ s{.*/}{};
            system $mosdev->mos_cli, '--port', $port, 'rm', $f;
          }
          $console->start;
        }
        elsif ($event->{path} eq "$cwd/build/fw.zip") {
          if (-f $event->{path}) {
            $console->stop;
            $mosdev->log("Flashing firmware build/fw.zip");
            MOSDev::Flash->new_with_options(parent_command => $mosdev)->run($event->{path});
            $console->start;
          }
        }
        elsif ($event->{path} eq $build_file) {
          $mosdev->log("Build file touched, building firmware...");
          $console->stop;
          MOSDev::Build->new_with_options(parent_command => $mosdev, wait => 0, save_conf => 1, local => 0)->run;
          $console->start;
          # TODO skip removing/uploading conf9.json
        }
      }
    });
  }
}


# =============================================================================
package MOSDev::Build;
use Moo;
use CLI::Osprey desc => 'build firmware';

option arch => (
    is         => 'lazy',
    format     => 's',
    format_doc => 'arch',
    doc        => 'architecture to build for, check connected device if not set',
  );
sub _build_arch {
  my $self = shift;
  my $mosdev = $self->parent_command;
  $mosdev->log('Determining build architecture from attached device');
  my $info = $mosdev->call('Sys.GetInfo');
  return $info->{arch};
}

option clean => (
    is        => 'rw',
    default   => 0,
    negatable => 1,
    doc       => 'clear prior build artifacts',
  );

option local => (
    is        => 'rw',
    default   => 1,
    negatable => 1,
    doc       => 'use local (docker) build',
  );

option save_conf => (
    is  => 'rw',
    doc => 'build existing device config into new firmware',
  );

has wait => (
    is      => 'rw',
    default => 1
  );

sub run {
  my ($self) = @_;
  my $mosdev = $self->parent_command;
  die "Cannot determine architecture." unless $self->arch;

  my $remove_conf9 = 0;
  if ($self->save_conf) {
    if (-e 'fs/conf9.json') {
      warn "Refusing to overwrite fs/conf9.json; cannot save device config into build.\n";
    } else {
      $mosdev->log("Saving current config into fs/conf9.json");
      $mosdev->download_config('fs/conf9.json');
      $remove_conf9 = 1;
    }
  }

  $mosdev->log('Starting' . ($self->clean ? ' clean' : '') . ($self->local ? ' local' : ' cloud') . ' build...');
  my $pid = fork;
  if ($pid == 0) {
    system $mosdev->mos_cli, 'build', '--platform', $self->arch, ($self->local ? '--local' : ()),
      ($self->clean ? '--clean' : ());
    if ($remove_conf9) {
      $mosdev->log("Cleaning up fs/conf9.json");
      unlink 'fs/conf9.json';
    }
    exit;
  }
  else {
    waitpid $pid, 0 if $self->wait;
  }
}


# =============================================================================
package MOSDev::Call;
use Moo;
use CLI::Osprey desc => 'remote procendure call';

sub call_rawout {
  my ($self, $cmd, $args) = @_;
  my $mosdev = $self->parent_command;
  my $port = $mosdev->port;
  $mosdev->save_port($port);

  $args = JSON->new->allow_nonref->encode($args) if ref $args;
  $args ||= '{}';

  my $pid = open my $pipe, '-|';
  if ($pid == 0) {
    exec $mosdev->mos_cli, '--port', $port, 'call', $cmd, $args;
  }
  else {
    my $o = join '', <$pipe>;
    close $pipe;
    return $o;
  }
}

sub call {
  my ($self, $cmd, $args) = @_;
  my $raw = $self->call_rawout($cmd, $args);
  my $o = eval {JSON->new->allow_nonref->decode($raw)};
  die $raw if $@;
  return $o;
}

sub run {
  my ($self) = @_;
  my ($cmd, $json) = @ARGV;
  print $self->call_rawout($cmd || 'RPC.List', $json);
}


# =============================================================================
package MOSDev::Console;
use Moo;
use CLI::Osprey desc => 'watch device console/log output';

has wait => (
    is      => 'rw',
    default => 1,
  );

has pid => (
    is => 'rw',
  );

sub run {
  my $self = shift;
  bless $self, "MOSDev::Console::" . $self->parent_command->port_type;
  $self->start;
}

package MOSDev::Console::ws;
use Moo;
use base 'MOSDev::Console';

sub start {
  my ($self) = @_;
  return if $self->pid;
  my $mosdev = $self->parent_command;
  my $addr = $mosdev->udp_log_addr;
  my (undef, $port) = split ':', $addr;
  $mosdev->log("Starting UDP log listener on port $port");
  $self->pid(fork);
  if ($self->pid == 0) {
    while (1) {
      my $sock = IO::Socket::INET->new(LocalPort => $port, Proto => 'udp') or die "$@\n";
      my $msg;
      print $msg while $sock->recv($msg, 1024);
      $sock->close;
      $mosdev->log("UDP socket closed, reopening...\n");
    }
    exit;
  }
  else {
    $mosdev->log("Configuring UDP log sending to $addr");
    system $mosdev->mos_cli, '--port', $mosdev->port, '--no-reboot', 'config-set', "debug.udp_log_addr=$addr";
    waitpid $self->pid, 0 if $self->wait;
  }
}

sub stop {}

package MOSDev::Console::dev;
use Moo;
use base 'MOSDev::Console';

sub start {
  my ($self) = @_;
  my $mosdev = $self->parent_command;
  $self->pid(fork);
  if ($self->pid == 0) {
    exec $mosdev->mos_cli, '--port', $mosdev->port, 'console';
  }
  else {
    waitpid $self->pid, 0 if $self->wait;
  }
}

sub stop {
  my ($self) = @_;
  if ($self->pid) {
    kill 'TERM', $self->pid;
  }
  $self->pid(undef);
}


# =============================================================================
package MOSDev::Flash;
use Moo;
use CLI::Osprey desc => 'flash device';

sub run {
  my $self = shift;
  bless $self, "MOSDev::Flash::" . $self->parent_command->port_type;
  $self->run(@_);
}

package MOSDev::Flash::ws;
use Moo;
use base 'MOSDev::Flash';

sub run {
  my ($self, $path) = @_;
  my $mosdev = $self->parent_command;
  $path ||= 'build/fw.zip';
  $mosdev->log("Starting OTA flash...");
  $mosdev->port =~ m{^ws://(.*)/rpc$};
  die "cannot determine device IP address\n" unless $1;
  system 'curl', '-F', 'filedata=@' . $path, "http://$1/update";
}

package MOSDev::Flash::dev;
use Moo;
use base 'MOSDev::Flash';

sub run {
  my ($self, $path) = @_;
  my $mosdev = $self->parent_command;
  $path ||= 'build/fw.zip';
  die "firmware file $path does not exist\n" unless -e $path;
  system $mosdev->mos_cli, '--port', $mosdev->port, 'flash', $path;
}


# =============================================================================
package main;
MOSDev->new_with_options->run unless caller;

1;
